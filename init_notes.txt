MAIN POINTS:

--> Process 
- One program can have many processes running at the same time.
- By using the function "fork", you essentially make a copy of the current process - with variables and values and everything.
- If a value is modified in a child process, the other processes won't get affected, as it is just a copy.
- The different processes run in different memory spaces.
Example: When you pass a char *str to a function, you can modify the values inside a function, but they won't affect the memory address itself.

--> Threads
- When you create a thread, it executes a function.
- Similar to a process, but if you change a variable inside of one thread, it's also gonna change the variable in all the other threads. 
- It uses a "shared memory space", so all the threads are happening within the same memory space.
- "Memory race" can therefore be an issue. Threads are running super fast, in the matter of milliseconds. So if one thread changes a variable, and 
another one does it at the same time - the faster one will be prioritized, before the other one will also modify it. 
- Memory races can cause issues, and it is important to protect against this, as with memory allocation protection.

--> Race condition
- When multiple threads are made, and one of them pauses to give
space for the other ones to execute - data can get lost.
- This means for instance: If there are two threads, both incrementing a value,
one of them can pause to give space for the other one. This can cause
the variable not being incremented as expected.

--> Mutexes
- Sort of a "lock" around a section of code. This prevents
different threads from executing at the same time, or unnecessary
pausing.
- The pthread_mutex_init function initializes a mutex.
- The pthread_mutex_lock function locks the mutex.
- (Whatever piece of code to be executed gets executed).
- The pthread_mutex_lock function unlocks the mutex.
- The pthrea_mutex_destroy function frees a mutex.

--> Philosophers